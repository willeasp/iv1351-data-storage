\documentclass[a4paper]{scrreprt}
\usepackage{fancyhdr}
\pagestyle{fancy}
\usepackage[english]{babel}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{url}
\usepackage{textcomp}
\usepackage{amsmath}
\usepackage{lastpage}
\usepackage{pgf}
\usepackage{wrapfig}
\usepackage{fancyvrb}
\usepackage{hyperref}
\usepackage{xcolor}

% Define own tags
\def\code#1{\texttt{#1}}

% Create header and footer
\headheight 27pt
\pagestyle{fancyplain}
\lhead{\footnotesize{Data Storage Paradigms}}
\chead{\footnotesize{Project Report}}
\rhead{}
\lfoot{}
\cfoot{\thepage\ (\pageref{LastPage})}
\rfoot{}

% Create title page
\title{Project Report}
\subtitle{Data Storage Paradigms, IV1351}
\author{William Asp, wasp@kth.se}
%\date{\today} Prints today's date
\date{\today}

\begin{document}

\maketitle

\tableofcontents %Generates the TOC

\chapter{Introduction}

\chapter{Literature Study}
\section{Task 1, Conceptual Model}
The information about how to create the conceptual model was collected by viewing the lecture on IE notation and conceptual modeling. Chapter 3 in the course book \cite{fundamentals-book} was also read lightly, although not in depth. 
Earlier experience in modeling comes from the course IV1350 Object Oriented Design, where a domain model was designed.

The information collected about how to make a conceptual model can be summarized by: 
\begin{itemize}
\item Do noun identification for entity candidates
\item Use a category list to find more entity candidates
\item Remove unnecessary entities
\item Find attributes
\item Find relations
\item Review
\end{itemize}
\cite{object-book}

The steps are the same for domain modeling, but the focus for conceptual modeling is the data and its relations. Some points to keep in mind are:
\begin{itemize}
\item There is no point in an entity without attributes
\item It is important to find all attributes
\item For each attribute define cardinality, whether the attribute must be unique, and if it is allowed to be without value
\item It is important to find all relations
\item Specify cardinality for all relations
\end{itemize}
\cite{concept-lecture}

\section{Task 2, LogPhys Model}
The literature used to prepare for the task was to view the lectures supplied about Logical and Physical models. The lectures were determined to give sufficient knowledge and approaches to be able to complete the task.

The lectures were about logical and physical modeling, and an intersection between the two that were to be made in the task. The lectures also covered steps on how to convert the conceptual model to the LogPhys Model.

\section{Task 3, Queries and Data Serialization}
The information collected before starting development was the lecture SQL - The Structured Query Language, held for the project course. The lecture taught creating a database, querying the database, architecture of the database, data manipulation and views. 


\chapter{Method}
\section{Task 1, Conceptual Model}
All modelling in this task was done in the modelling program Astah.

Creating the conceptual model, the first step made was to do noun identification on the project description. This is to find all the possible entity candidates to use in the database. The next step was to use a category list to find more possible entity candidates. After all possible entities have been found, unnecessary entities were removed. 

When all entities had been found, the next thing to do was finding entity attributes. When finding the attributes, the things to keep in mind were that attributes can only be of the type string, bool, number or time. Attributes can not have attributes, and an attribute is not a part of an entity.
For each attribute, the cardinality was defined, whether the attribute must be unique, and if it is allowed to be without value. Much time was spent on trying to find all attributes.

When finding all attributes, time was also spent on trying to find relations between entities. It is important to find all relations. It is also important to find all specify the cardinality for each relation.

The improvement from above steps is reviewed multiple times and redone to improve the model as much as possible.

\section{Task 2, Logical And Physical Model}
This task was solved using the Astah diagram editor.
The first step was creating a table for each entity. In each entity, a column was created for each attribute with the cardinality 0..1 or 1..1. For each attribute with a higher cardinality, a new table was created. For each column, type (domain) was specified, and column constraints were considered, which means to decide for example if an attribute can not be null or if it has to be unique in the column. Primary keys were assigned to all strong entities, where surrogate keys are preferred. 

When modeling relations, there were some things to consider. When modeling one-to-one and one-to-many relations, the approach was: Create the relation, start with using the PK of the strong end as foreign key in the weak end, if the weak end has meaning without the strong end, use a surrogate PK there as well. Otherwise the foreign key as the primary key. When storing foreign keys, constraints were considered, meaning it was decided if deletion of the foreign key would delete all other references to that entity, or if it would simply set it to null, or if it were to be illegal to delete.

For each many-to-many relation, a cross-reference table was created. Present PKs were used as FKs. The PK is either the FKs combined or a surrogate PK. Also here FK constraints were considered. 

For tables representing multi-valued attributes, the PK of the “parent” was assigned as the FK, the PK were set as the FK and the multi-valued attributes combined.

Lastly, the model was verified to be normalized and that it was possible to perform all planned operations on the data.

\section{Task 3, Queries and Data Serialization}
The DBMS used in this task is PostgreSQL, in a docker container. The editor used to develop SQL queries is Visual Studio Code. The code was developed in a script and ran inside a psql instance in the docker container. 
To verify that the code worked as intended, multiple runs was made with different data in the tables. Edge cases was explored and the query was tried to be “broken”, meaning that runs was made with data that could if the query was not sufficient, produce wrong results. 
While testing other queries, ones that had already been tested was also tested again, to make sure again that the results made sense with the new data. 
To verify that the tests was correct, the correct answer had to be manually calculated, as in the desired result was calculated, and then compared to the result.


   
\chapter{Result}
\section{Task 1, Conceptual Model}

\begin{figure}[h]
    \includegraphics[width=\textwidth]{ConceptualModel.PNG}
    \caption{Conceptual model diagram.}
    \label{fig:conceptual-model}
\end{figure}

The conceptual model as seen above in figure \ref{fig:conceptual-model} uses inheritance from Person to Student and Instructor. This is done because both student and instructor share some attributes. At the same way, RentalInstrument inherits Instrument. This is done because RentalInstrument is seen as a physical object, it has attributes that are used in the “real world”, while Instrument is just seen as the “idea” of an instrument, or simply what type of instrument it is. This is done to make a difference of an instrument that a person plays (you can say you play an instrument but you don't necessarily own it), and when a person rents an instrument.
Some places in the model you can see the keyword DERIVED. This means that the attribute is calculated by other things in the diagram.

\begin{figure}[H]
    \includegraphics[width=\textwidth]{LogPhys Model 2 student update.png}
    \caption{Logical-Physical model diagram.}
    \label{fig:logphys-model}
\end{figure}
\section{Task 2, Logical And Physical Model}
The logical model result can be seen in figure \ref{fig:logphys-model}.

\noindent Link to GitHub repository: {
    \color{blue}\href{https://gits-15.sys.kth.se/wasp/IV1351-Datalagring}
                    {https://gits-15.sys.kth.se/wasp/IV1351-Datalagring}
}

\\~\\
The model can be seen in figure \ref{fig:logphys-model} below.
The Logical-Physical model created during this task covers the entire SoundGood music school application description The diagram is made in crow foot’s notation, and a database was created based exactly on the diagram. 
The database has persons, that can be a student, instructor or both. The student and group, ensemble-lessons are linked with many-to-many relationship to allow lessons to know what students are attending the lesson. 
Instrument is connected to multiple lessons, to be able to know what lessons are using a specific instrument. Instrument and instructor, student also has a many-to-many relationship to be able to find both what instructors plays a specific instrument and what instruments a specific instructor plays. Person was chosen to still be in the model, since it might be of interest to keep all the persons currently in the database, aside from the student and instructor information.



\section{Task 3, Queries and Data Serialization}
The following bold text is the instruction for the query to be made. After each description an explanation will be made of how the query was made.
\\~\\


\textbf{Show the number of instruments rented per month during a specified year. It shall be possible to retrieve the total number of rented instruments (just one number) and rented instruments of each kind (one number per kind, guitar, trumpet, etc). The latter list shall be sorted by number of rentals. This query is expected to be performed a few times per week.}
\par
Link to Github can be found \underline{\href{https://gits-15.sys.kth.se/wasp/IV1351-Datalagring/blob/a708e00833d09854fd7cab0bcb9b94f11ba210fb/src/scripts/task3.sql#L4}{here}}.
This query works by getting the number of rentals for each instrument per month, and then using the COALESCE function to get the total for all instruments per month, as well as the total for all months.
The inner select statement is used to be able to use the COALESCE function, which fills in NULL spaces with a default value. 
The testing was made by changing the year that is used, and seeing that no data appears since no rentals was made in 2021. 
\\~\\



\textbf{The same as above, but retrieve the average number of rentals per month 
during the entire year, instead of the total for each month.}
\par
Link to Github can be found \underline{\href{https://gits-15.sys.kth.se/wasp/IV1351-Datalagring/blob/a708e00833d09854fd7cab0bcb9b94f11ba210fb/src/scripts/task3.sql#L55}{here}}.
This query works by first selecting all instrument rental per month, and then aggregating that into an average for the whole year per instrument, as well as all instruments.
The testing was made by checking the year that the average was calculated on was correct, as well as checking that the average calculated on all rentals was correct.
\\~\\


\textbf{Show the number of lessons given per month during a specified year. It shall 
be possible to retrieve the total number of lessons (just one number) and 
the specific number of individual lessons, group lessons and ensembles. This 
query is expected to be performed a few times per week. 
}
\par
Link to Github can be found \underline{\href{https://gits-15.sys.kth.se/wasp/IV1351-Datalagring/blob/a708e00833d09854fd7cab0bcb9b94f11ba210fb/src/scripts/task3.sql#L82}{here}}.
This query was interesting to make. The goal was to get each lesson type in its own column, so that the number of lessons per month could be read on one line. This was done by counting the number of times each lesson appeared. This was done by selecting every date a lesson appeared, and creating custom columns, one per type of lesson, and one total column. The column with the type of lesson that the table contained, was put in a 1, and the others was put as zero, and the total was also put sa 1. The when the SUM function summed up the number of lessons per month, the number of lessons per month appeared in the respective column. The negative thing about the query is that it became three nested SELECTs.

This was tested by adding lessons in multiple months, years and days.
\\~\\



\textbf{The same as above, but retrieve the average number of lessons per month
during the entire year, instead of the total for each month.
}
\par
Link to Github can be found \underline{\href{https://gits-15.sys.kth.se/wasp/IV1351-Datalagring/blob/a708e00833d09854fd7cab0bcb9b94f11ba210fb/src/scripts/task3.sql#L136}{here}}.
This query works the same as the query before, except that the average was calculated over the sum function. 
This was tested by adding lessons in multiple months, years and days and seeing that it worked for all cases.
\\~\\


\textbf{List all instructors who has given more than a specific number of lessons
during the current month. SUM all lessons, independent of type. Also list the 
three instructors having given most lessons (independent of lesson type) during 
the last month, sorted BY number of given lessons. This query will be used to 
find instructors risking to work too much, and will be executed daily.
}
\par
Link to Github can be found \underline{\href{https://gits-15.sys.kth.se/wasp/IV1351-Datalagring/blob/a708e00833d09854fd7cab0bcb9b94f11ba210fb/src/scripts/task3.sql#L176}{here}}.
This query became long, since the three instructors that worked the most was going to be visible, even if the limit of how many lessons they should have made to be displayed was higher than the three. 
Since no better solution was found, this query was solved by doing a union between two selects that worked very similarly. The first select gets the 3 instructors that worked the most, and the second select gets all instructors that have worked more than the specified number of lessons.

This was tested by having fewer instructors than three that had higher than the specified number of lessons, and three instructors still was displayed. The test also worked with having more than three instructors displaying, with no duplicate rows being displayed. 
\\~\\


\textbf{List all ensembles held during the next week, sorted by music genre and weekday. For each 
ensemble tell whether it's full booked, has 1-2 seats left or has more seats left.
}
\par
Link to Github can be found \underline{\href{https://gits-15.sys.kth.se/wasp/IV1351-Datalagring/blob/a708e00833d09854fd7cab0bcb9b94f11ba210fb/src/scripts/task3.sql#L257}{here}}.
This task was solved by getting the details of each ensemble, together with all students that entered that ensemble. Genre, date, student\_id and max\_student was collected, and then that was filtered with a select case to see how many places was left on the ensemble, and then printed a message about that. The date was checked by the date\_trunc method, which takes the current date, and then returns the date of the first day of the current week. The date of each ensemble is then checked to be after this date.

This query was tested by having ensembles on different dates, having different number of students, and changing the max\_students of each ensemble.
\\~\\


\textbf{List the three instruments with the lowest monthly rental fee. For each instrument tell 
whether it is rented or available to rent. Also tell when the next group lesson for each
listed instrument is scheduled.
}
\par
Link to Github can be found \underline{\href{https://gits-15.sys.kth.se/wasp/IV1351-Datalagring/blob/a708e00833d09854fd7cab0bcb9b94f11ba210fb/src/scripts/task3.sql#L304}{here}}.
This task was interpreted to be meant to list the three cheapest rental instruments, even if they are the same kind of instrument. This task was solved by joining together rental, rental\_instrument, instrument and group\_lesson. From group\_lesson, the soonest date for each instrument was chosen. The result was ordered by monthly\_fee and then limited to three rows. 

This was tested by having lessons in multiple dates, both before and after the current date. For a rental\_instrument, it was tested to see whether it would be available or rented, based on the date it was rented as well as if it didn’t exist in the rental table. Multiple instances of the same type of instrument, but different rental\_instrument appears in the rental table. 
\par


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\chapter{Discussion}
\section{Task 1, Conceptual Model}

The model follows the naming criteria, with everything using camelcase, capitalized first letter of the entity names, and small first letter of attribute names and relations. The names are made to be concise and are easily understandable. 

The model was made to be as concise as possible, to keep it simple to understand for further modeling. There is a reasonable number of entities that cover every aspect of the requirement specification, not too few or too many. There might be some entity missing that ended up as an attribute, or some entity that should have been an attribute. For example, the skill entity could have been an attribute of Student, but then it would be difficult to model multiple instruments. Or it could have been an attribute of Instrument, with the instrument type and skill level being in a table that belongs to Student.

All data that shall be stored are modeled into attributes of relations in the model. The cardinality is not specified for all attributes, but it is for the ones where the cardinality can be multiple. There is also specified which attributes shall be unique and which attributes which cannot be null. The attributes firstName and lastName of Person might not need to be NOT NULL, but this was chosen to be able to identify students that are assigned to lessons by name, but this was just a design choice.

All relevant relations are specified with cardinality and name. There are sufficient relations to fulfill the requirement specification, but there are some cases where it is possible to draw additional relations. For example lessons could be related to Pricing as to show that they use that pricing, and SoundgoodMusicSchool could have more relations, for example to all the lessons, to show that it sells them. 

The different types of lessons (“IndividualLesson”, “GroupLesson”, and “Ensemble”) are chosen not to inherit a superclass "Lesson", since it was evaluated that they do not have enough in common to make them a subclass. 

There are not many notes in the diagram, but the ones there are explains more about the pricing scheme. There are no constraints in the diagram as plain text which might be a problem, but the constraints were tried to be built in the attributes of entities, for example minStudentAge in SoundGoodMusicSchool is a constraint of the minimum age of a student applying to the school.

For the higher grade part of Task 1, I used inheritance when modeling Instructor and Student, and named the superclass of them “Person”. The advantage of using Person as a superclass is that for the properties similar to student and Instructor, it only has to be modeled once, not for both Student and Instructor. Another advantage is that the model can become clearer to understand, or the layout of the model is better. The Student’s unique attributes makes it more clear what is special in relation to the Instructor. A disadvantage of using inheritance in the conceptual model is that it might not reflect well on how the design in the database will be, it might in fact make it more unclear as to how to model the database. 

Overall, the model is evaluated so that it does the job good enough to help modeling the database further.


\section{Task 2, Logical And Physical Model}
The naming conventions are followed, since all tables and attributes are written in snake case. The names contain information about what they are, when they are seen in the context of the table they are in. For example \code{price} in \code{individual\_lesson} is understood in the context of the table, otherwise it might be hard to understand.
The model is not fully in 3NF. For example in person, the address is stored directly in the person, as to not have a separate table for it. This was made because an address can have one to many people, and many persons can have one address, which would be a many-to-many relationship. But this amount of logic and relations needed to create that seemed unnecessary after some consideration, and the result was to put them directly in the person, at the cost of maybe having multiple addresses the same in the table. This might turn out to be bad in the future, or to be easier to use. Other than that the model is seen to be in 3NF.

The tables that exist in the model are made to exist for good purpose, it was wanted to avoid normalizing too much, and have many tables that only serve one small purpose. The tables that normalizing was used, were tables that would have been superfluous otherwise. The application that was described in the project description was taken very much by the words, and no other functionality or data was assumed to be stored in the database, which led to many design choices being made. 

constraints were decided upon if they were to be set to NOT NULL or not, which was a difficult task to decide. Because of the impact of how the application will work, many times it was felt that almost all attributes should have NOT NULL as column constraint. Instead, the philosophy used to make decisions was that the user also is responsible to make sure that attributes have to be set or not. From experience, if a program complains that an attribute can not be not set, that leads to a lot of frustration if that attribute or setting does not even matter for the task that one wants to do. That lead to trying to avoid setting too many NOT NULLs. 
As for the column type, that was not too hard to decide upon, the only thing to decide was the length of the VARCHAR data type. Mostly this was not thought too hard about, and was instead set as a rather large number, as Leif on the lectured mentioned in the lectures that it’s not the programmer to decide how long the longest name one can have is, for example.
As for foreign key constraints, it was thought that the program should not allow the user to delete things and set NULLs all over the database. Instead, they would get an error and delete the data relating to the tuple one wanted to delete in the first place. ON DELETE SET NULL was only set where the child actually could be of interest to keep without the parent. 
The ON DELETE CASCADE was chosen to be set on most places where the foreign key was set to NOT NULL. This means that if the parent the FK is pointing to is deleted, then the child (tuple with foreign key NOT NULL) might as well be deleted, since it has no meaning otherwise. This is mostly true for cross-reference tables, that is useful for pointing many-to-many relations.

Most primary keys are chosen to be surrogate keys, since many tables have meaning without the parent. Also, when having tables on the many side of a one-to-many relation, there can not be the foreign key as primary key, oftentimes, a own surrogate key was given to such tables, also since surrogate keys are a better future proof way to keep the tables.

All relevant relations are specified, but there is a relation that is not seen, although it is written about. The \code{lesson\_pricing} table does have information that each lesson will get it’s price from, but that is not seen in the diagram. That was made so that the lessons will “remember” their price at the time of the lesson, even if the pricing scheme changes at the end of the month. 

As relations were tested against logic in the project description during modeling, the model should hold up well when performing the tasks described. Also since the model should be well constructed with all important information being available in the model, it should be able to perform all tasks.

There are some business rules and constraints that are not visible in the diagram, for example that there can only be two rentals per student. The relationship was left as a one-to-many relationship, since that is what it is in the database model. The constraint should have been left as a note in the diagram.

\subsection{Higher Grade}
There are a couple different options when mapping inheritance in the logical model. 
The different kinds of options when implementing can be divided into two categories, either multiple relations, or single relations. When using multiple relations, the superclass is its own table, for example Person, and the different subclasses are tables with each subclass’ specific attributes. This was the approach made in the model created in this task. The other option considered was to create two tables for student and instructor both containing the person attributes, along with each specific attributes for student and instructor. 
There might not be a difference in the logical model depending on whether inheritance was used in the conceptual model. Depending on what option is used when mapping inheritance to the logical model, there is a possibility that the resulting logical model can work exactly as if there hadn’t been inheritance in the conceptual model. For example: if the conceptual model had the student and instructor entities, both with name, personnumber etc, then the logical model could be modeled exactly like that. But if the conceptual model had a superclass person to student and instructor, then the logical model could still be modeled using just student and instructor, both having the same attributes as person. 
 
The advantage of using inheritance is that it enables the database to store more general information, for example all persons that exist in a database. It is a better way to divide the same type of information in the database as well, since there aren’t many columns over many tables that store the exact same type of data. A problem that might arise is that the database becomes difficult to control using constraints, for example: The database contains superclass person for student and instructor. Should a person be able to exist without either a student or instructor? Can a person be both? Doing it this way makes it harder to figure out these types of constraints. Having inheritance also may help with keeping fewer relations, for example, should a person be related to “email” or should instructor and student both be related to email? 
The advantage of not using inheritance is that there are fewer tables in the database to keep track of. It is not needed to query many tables to get information about a child entity. 


\section{Task 3, Queries and Data Serialization}
When deciding whether to or not to create a view or materialized view for each query, the thing to decide is if a kind of table is supposed to be created. A view or materialized view is made from a query of existing tables. The difference between a view and a materialized view is that a view is a table that is computed from the query every time it is called, but a materialized view is a table from the result of the query that is physically stored permanently, and has to be refreshed to get any updated data. A materialized view is for good use when it queries a lot of data or is executed very often. 

When reviewing the queries to determine which should be views or not, it is immediate that it all depends very much on how one interprets how each query will be used, and how much it will be used. The results are debatable, and are so because of the way each query requirement is specified, The results are:

\begin{itemize}
    \item 
        \textbf{Query 1}
        The first query is not a view or materialized view since it is expected that it will be used directly, with the user manually entering the specified year in the script.
    \item
        \textbf{Query 2}
        Same as above
    \item    
        \textbf{Query 3}
        Same as above
    \item
        \textbf{Query 4}
        Same as above
    \item
        \textbf{Query 5}
        Chosen to be a view, but not a materialized view. It is not materialized since it will probably only be executed once per day and therefore has no reason to be materialized. 
    \item
        \textbf{Query 6}
        Chosen to be a materialized view. This is because it is set to be used from a website which displays the data, and the traffic to the website is not known, but the decision to make it materialized is to be sure the website only gets the data it needs, and does not have to query multiple tables every time a user hits refresh. The thing to be careful of is that the view has to be refreshed when some data in the original tables involved changes. This can be done by programmatically or with database triggers.
    \item
        \textbf{Query 7}
        This is chosen to be a view, but not a materialized view. It is eligible to be a materialized view, since it is supposed to be queried by a website. However, it would require the view to be refreshed based on multiple requirements and therefore create many dependencies. To avoid this, a simple view is created instead, at the cost and performance risk of having to calculate the result each time the view is referenced. The performance could be bettered by how the website caches the results from the database. 
\end{itemize}


\begin{thebibliography}{3}
    \bibitem{object-book}
    Leif Lindbäck
    \textit{A First Course in Object Oriented Development, A Hands-On Approach}
    November 17, 2020
    
    \bibitem{fundamentals-book}
    Ramez Elmasri, Shamkant B. Navathe
    \textit{Fundamentals of Database Systems, 7th Edition}
    November 17, 2020
    
    \bibitem{concept-lecture}
    Lecture on Conceptual Modeling in course "IV1351 Data Storage" at KTH Royal Institute of technology.
    [Internet source, retrieved 2020-11-25] url: 
    \href{https://kth.instructure.com/courses/19966/pages/conceptual-model?module_item_id=252540}{balle}
    
    
\end{thebibliography}

\end{document}